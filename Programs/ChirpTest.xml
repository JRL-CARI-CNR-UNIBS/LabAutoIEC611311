<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="Beckhoff Automation GmbH" productName="TwinCAT PLC Control" productVersion="3.5.13.21" creationDateTime="2025-04-03T11:14:12.6213138" />
  <contentHeader name="Untitled1" modificationDateTime="2025-04-03T11:14:12.6213138">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation />
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous>
      <pou name="ChirpTest" pouType="program">
        <interface>
          <localVars>
            <variable name="asse1">
              <type>
                <derived name="AXIS_REF" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Axis reference and motion control blocks</xhtml>
              </documentation>
            </variable>
            <variable name="asse1_power">
              <type>
                <derived name="MC_Power" />
              </type>
            </variable>
            <variable name="asse1_setpos">
              <type>
                <derived name="MC_SetPosition" />
              </type>
            </variable>
            <variable name="bStart" address="%I*">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start trigger for the chirp experiment (external input)</xhtml>
              </documentation>
            </variable>
            <variable name="fbExtSetPointEnable">
              <type>
                <derived name="MC_ExtSetPointGenEnable" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enables external setpoint generation for the axis</xhtml>
              </documentation>
            </variable>
            <variable name="fbExtSetPointDisable">
              <type>
                <derived name="MC_ExtSetPointGenDisable" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Disables external setpoint generation</xhtml>
              </documentation>
            </variable>
            <variable name="Tc">
              <type>
                <LREAL />
              </type>
              <initialValue>
                <simpleValue value="0.001" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sampling time (in seconds), default 1 ms</xhtml>
              </documentation>
            </variable>
            <variable name="amplitude">
              <type>
                <LREAL />
              </type>
              <initialValue>
                <simpleValue value="360" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Amplitude of the chirp signal in engineering units (e.g., degrees or mm)</xhtml>
              </documentation>
            </variable>
            <variable name="acc">
              <type>
                <LREAL />
              </type>
              <initialValue>
                <simpleValue value="0.0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Output acceleration from the chirp generator</xhtml>
              </documentation>
            </variable>
            <variable name="vel">
              <type>
                <LREAL />
              </type>
              <initialValue>
                <simpleValue value="100.0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Output velocity from the chirp generator</xhtml>
              </documentation>
            </variable>
            <variable name="pos">
              <type>
                <LREAL />
              </type>
              <initialValue>
                <simpleValue value="0.0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Output position from the chirp generator</xhtml>
              </documentation>
            </variable>
            <variable name="dir">
              <type>
                <DINT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Direction: 1 = forward, -1 = backward, 0 = stopped</xhtml>
              </documentation>
            </variable>
            <variable name="f0">
              <type>
                <LREAL />
              </type>
              <initialValue>
                <simpleValue value="1.0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Starting frequency of the chirp signal (Hz)</xhtml>
              </documentation>
            </variable>
            <variable name="f1">
              <type>
                <LREAL />
              </type>
              <initialValue>
                <simpleValue value="450.0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Final frequency of the chirp signal (Hz)</xhtml>
              </documentation>
            </variable>
            <variable name="duration">
              <type>
                <LREAL />
              </type>
              <initialValue>
                <simpleValue value="60.0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Duration of the chirp signal (seconds)</xhtml>
              </documentation>
            </variable>
            <variable name="UseLog" address="%I*">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> TRUE for logarithmic chirp; FALSE for linear chirp</xhtml>
              </documentation>
            </variable>
            <variable name="running" address="%Q*">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> TRUE when experiment is in Chirp state</xhtml>
              </documentation>
            </variable>
            <variable name="stopping" address="%Q*">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> TRUE during final deceleration and stop phases</xhtml>
              </documentation>
            </variable>
            <variable name="chirp">
              <type>
                <derived name="FB_ChirpSignal" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Chirp signal generator function block instance</xhtml>
              </documentation>
            </variable>
            <variable name="act_pos">
              <type>
                <LREAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual position from the axis</xhtml>
              </documentation>
            </variable>
            <variable name="act_vel">
              <type>
                <LREAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual velocity from the axis</xhtml>
              </documentation>
            </variable>
            <variable name="act_torque">
              <type>
                <LREAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual torque from the axis</xhtml>
              </documentation>
            </variable>
            <variable name="first_position">
              <type>
                <LREAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Position at the start of the chirp experiment</xhtml>
              </documentation>
            </variable>
            <variable name="logger">
              <type>
                <derived name="FB_DataLogger" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> File logging function block instance</xhtml>
              </documentation>
            </variable>
            <variable name="state">
              <type>
                <derived name="E_State" />
              </type>
              <initialValue>
                <simpleValue value="E_State.None" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Current state of the finite state machine</xhtml>
              </documentation>
            </variable>
            <variable name="sFileName">
              <type>
                <derived name="T_MaxString" />
              </type>
              <initialValue>
                <simpleValue value="'C:\Users\Administrator\Documents\binari\test1.bin'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Binary file path</xhtml>
              </documentation>
            </variable>
            <variable name="netId">
              <type>
                <derived name="T_AmsNetId" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Network ID for TwinCAT file functions</xhtml>
              </documentation>
            </variable>
            <variable name="nTaskIdx">
              <type>
                <DINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index of the running task</xhtml>
              </documentation>
            </variable>
            <variable name="tmp">
              <type>
                <LREAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary variable</xhtml>
              </documentation>
            </variable>
            <variable name="idx">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Generic counter for delay loops</xhtml>
              </documentation>
            </variable>
            <variable name="last_position">
              <type>
                <LREAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Position after chirp completion</xhtml>
              </documentation>
            </variable>
            <variable name="slowing_down_vel">
              <type>
                <LREAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Velocity captured before slowing down</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*
===============================================================================
Chirp Experiment – TwinCAT Axis Control with Logging and Signal Injection
===============================================================================

This program implements a fully automated **chirp-based excitation experiment**
on a single motion axis in TwinCAT. The control flow is managed through a clearly
defined **finite state machine (FSM)**, which handles axis setup, signal injection,
data logging, and safe deceleration and shutdown.

The goal is to apply a **chirp signal**—a frequency-swept input—to the axis as an
external setpoint, allowing dynamic system response analysis. While doing so,
important motion feedback signals (position, velocity, torque) are recorded in a
binary file for post-processing.

The experiment is composed of the following key phases:

------------------------------------------------------------------------------
🧭 STATE MACHINE BEHAVIOR
------------------------------------------------------------------------------

🔹 `E_State.None` – **Idle / Standby**
- The initial state of the system.
- Waits for the external trigger `bStart` to become TRUE.
- Reads the PLC task’s cycle time to determine `Tc`, the sampling interval.
- This ensures the chirp generator is precisely synchronized with the task.

🔹 `E_State.Init` – **Axis Power-On**
- Commands the axis to enable using the standard `MC_Power` block.
- Waits until the drive signals it is ready (`Active = TRUE`).
- Once ready, transitions to the motor start state.

🔹 `E_State.StartingMotor` – **Prepare for Motion**
- Resets the axis position to zero using `MC_SetPosition`.
- Activates external setpoint mode via `MC_ExtSetPointGenEnable`.
- Configures the `FB_ChirpSignal` with frequency range, duration, and amplitude.
- Opens the data log file with `FB_DataLogger`, ready to store measurements.
- Transitions to the file-open wait state.

🔹 `E_State.OpeningFile` – **Wait for File Ready**
- Waits until the logger is not busy (`bBusy = FALSE`), meaning the file is open.
- Captures the axis position as the reference for chirp-relative motion.
- Proceeds to the active chirp signal execution phase.

🔹 `E_State.Chirp` – **Chirp Signal Execution**
- Calls the chirp function block cyclically to generate position, velocity, and
  acceleration commands as a function of time.
- Commands the axis in real-time using `MC_ExtSetPointGenFeed` with the chirp output.
- Continuously logs axis feedback data into the binary file.
- When `chirp.Done` becomes TRUE, indicating the signal has run its course,
  the system transitions to file closing.

🔹 `E_State.Saving` – **Close File**
- Sends a one-shot trigger to `FB_DataLogger` to close the binary file.
- Captures the last position and velocity at the end of chirp execution.
- Disables external setpoint mode to transition safely out of real-time control.
- Moves into a controlled deceleration phase.

🔹 `E_State.SlowingDown` – **Monitor Deceleration**
- Allows the axis to naturally slow down after external setpoint disengagement.
- Waits either until a velocity threshold is reached (e.g., below 1.0 units/s)
  or until a counter exceeds 2000 cycles (as a timeout failsafe).
- Ensures `MC_ExtSetPointGenDisable` is re-asserted.
- Once conditions are met, moves to axis shutdown.

🔹 `E_State.Stopping` – **Stop and Power-Off**
- Provides a timed delay (~5000 cycles) before safely powering off the axis.
- Ensures full stop before sending `MC_Power` with `Enable := FALSE`.
- Resets internal state and returns to `None` (idle), ready for the next cycle.

------------------------------------------------------------------------------
📘 ADDITIONAL DETAILS
------------------------------------------------------------------------------

- **Setpoint Feeding**:
  - Position, velocity, and acceleration commands are passed via `MC_ExtSetPointGenFeed`.
  - The signal can be either linear or logarithmic based on `UseLog`.

- **Signal Direction**:
  - Direction (`dir`) is computed from the sign of the velocity output to guide motion.

- **Binary Logging**:
  - Values logged: `chirp.t`, `act_pos`, `act_vel`, and `act_torque`.
  - Format: `ARRAY[1..4] OF LREAL` written using `FB_DataLogger`.

- **Task Syncing**:
  - The sampling time `Tc` is derived dynamically using `GETCURTASKINDEXEX()`, ensuring the chirp signal and logger stay synchronized with the PLC task.

- **Diagnostics**:
  - `running` and `stopping` flags are exposed as output variables to reflect experiment status.
  - Useful for UI binding or test monitoring.

This structure allows precise, automated execution of a dynamic excitation experiment with data capture and safe system shutdown, fully integrated in the TwinCAT runtime environment.

===============================================================================
*)

// === Always keep axis status updated ===
// This call ensures that the axis reference structure (asse1) is refreshed 
// with the most recent state, including position, velocity, and torque.
// It is important for correct control logic and safe feedback reading.
asse1.ReadStatus();

(*
===============================================================================
STATE MACHINE: Main Flow Logic
===============================================================================

This block defines the transitions between high-level states in the chirp 
experiment. The FSM ensures the experiment is initialized, executed, and 
terminated in a controlled, deterministic sequence.
*)

CASE state OF

	// --- STATE: Idle / Waiting ---
	E_State.None:
		// Wait for external trigger (`bStart`) to begin experiment
		// This is the system's resting state, entered after power-on or completion
		IF bStart THEN
			state := E_State.Init;
		END_IF

	// --- STATE: Powering the Axis ---
	E_State.Init:
		// Wait for `MC_Power` block to indicate axis is fully enabled and active
		// Ensures the drive is ready to receive motion commands
		IF asse1_power.Status AND asse1_power.Active THEN
			state := E_State.StartingMotor;
		END_IF

	// --- STATE: Preparing Axis and Chirp ---
	E_State.StartingMotor:
		// Wait until both the set position and external setpoint generation are complete
		// These confirm the motion system is configured correctly
		IF fbExtSetPointEnable.Done AND asse1_setpos.Done THEN
			state := E_State.OpeningFile;

			// Optionally capture the current position (useful for diagnostics)
			tmp := asse1.NcToPlc.ActPos;
		END_IF

	// --- STATE: Waiting for File Open Completion ---
	E_State.OpeningFile:
		// Wait until the logger finishes opening the binary file
		// This prevents logging attempts before the file handle is ready
		IF NOT logger.bBusy THEN
			// Save the axis position at the start of the experiment.
			// Used as a reference offset for the chirp signal
			first_position := asse1.NcToPlc.ActPos;

			// Begin the actual chirp generation phase
			state := E_State.Chirp;
		END_IF

	// --- STATE: Running the Chirp Signal and Logging ---
	E_State.Chirp:
		// This state will remain active while the chirp generator runs
		// Transition only when chirp is complete
		IF chirp.Done THEN
			state := E_State.Saving;
		END_IF

	// --- STATE: Closing Log File After Chirp ---
	E_State.Saving:
		// Wait until file logger finishes closing the file
		// Guarantees all data is flushed and saved correctly
		IF NOT logger.bBusy THEN
			// Store final values for reporting or safety
			last_position := asse1.NcToPlc.ActPos;
			slowing_down_vel := asse1.NcToPlc.ActVelo;

			// Move into deceleration and stopping phase
			state := E_State.SlowingDown;
			idx := 0; // Initialize counter used as timeout

			// Explicitly disable external setpoint generation
			// Prevents further feedforward commands after chirp ends
			fbExtSetPointEnable(
				Axis := asse1,
				Execute := FALSE,
				PositionType := POSITIONTYPE_ABSOLUTE
			);
			fbExtSetPointDisable(
				Axis := asse1,
				Execute := TRUE
			);
		END_IF

	// --- STATE: Monitoring Deceleration ---
	E_State.SlowingDown:
		// Allow the system to coast down or naturally stop
		// Either velocity must fall below threshold or a delay elapses

		// Condition A: Wait long enough (~2000 cycles) before proceeding
		IF idx &gt; 2000 THEN
			// Redundantly ensure external setpoint is fully disabled
			// (sometimes needed for specific drive implementations)
			fbExtSetPointEnable(
				Axis := asse1,
				Execute := FALSE,
				PositionType := POSITIONTYPE_ABSOLUTE
			);
			fbExtSetPointDisable(
				Axis := asse1,
				Execute := TRUE
			);

			idx := 0;
			state := E_State.Stopping;

		// Condition B: If velocity is still high, keep waiting and reset counter
		ELSIF ABS(act_vel) &gt; 1.0 THEN 
			idx := 0;
		END_IF

	// --- STATE: Power-Off and Reset ---
	E_State.Stopping:
		// Provide a buffer time (~5000 cycles) to ensure the system is stable
		// before removing drive power
		IF idx &gt; 5000 THEN
			// Fully disable drive power for safety and completeness
			asse1_power(
				Axis := asse1,
				Enable := FALSE,
				Enable_Positive := FALSE,
				Enable_Negative := FALSE
			);

			idx := 0;
			state := E_State.None; // Return to idle and ready for new run
		END_IF
END_CASE

// --- External flags for UI/debugging ---
running := state = E_State.Chirp;         // TRUE during chirp execution
stopping := state &gt; E_State.Chirp;        // TRUE from chirp end to axis power-off

(*
===============================================================================
EVENT LOGIC: Actions Tied to Each State
===============================================================================

This section defines the **operations that occur** while the system is *in* each state.
Unlike the FSM transition logic (which determines when to switch states), this part
executes behaviors appropriate to the current state, including power commands, 
signal generation, logging, and setpoint feed-forwarding.

Each block is evaluated cyclically, and actions are either conditionally or 
continuously performed based on the state.
*)

CASE state OF

	// --- STATE: None (Idle) ---
	E_State.None:
		// Determine the index of the current cyclic task
		// This is used to access task metadata such as the cycle time
		nTaskIdx := GETCURTASKINDEXEX();

		// Compute the task period `Tc` in seconds
		// 100 ns is the base resolution unit; convert it to seconds via multiplication
		Tc := 100.0E-9 * TO_LREAL(_TaskInfo[nTaskIdx].CycleTime);

		// No other actions required in idle state

	// --- STATE: Init (Power the Axis) ---
	E_State.Init:
		// Issue command to enable axis power in all directions
		// The command will stay active until the axis confirms it is powered (handled in transition logic)
		asse1_power(
			Axis := asse1,
			Enable := TRUE,
			Enable_Positive := TRUE,
			Enable_Negative := TRUE
		);

		// Reset the external start signal so it doesn’t retrigger the experiment
		bStart := FALSE;

	// --- STATE: StartingMotor (Configure Axis and Chirp) ---
	E_State.StartingMotor:
		// Send command to reset axis position to 0.0 (homing substitute)
		asse1_setpos(
			Axis := asse1,
			Execute := TRUE,
			Position := 0.0
		);

		// Enable external setpoint mode (required to command motion using generated trajectories)
		fbExtSetPointEnable(
			Axis := asse1,
			Execute := TRUE,
			PositionType := POSITIONTYPE_ABSOLUTE
		);

		// Make sure the disable command is not active simultaneously
		fbExtSetPointDisable(
			Axis := asse1,
			Execute := FALSE
		);

		// Initialize the chirp signal generator
		chirp.Amplitude := amplitude;       // Peak signal value
		chirp.FreqStart := f0;              // Initial frequency (Hz)
		chirp.FreqEnd := f1;                // Final frequency (Hz)
		chirp.Duration := duration;         // Total duration of signal (s)
		chirp.Ts := Tc;                     // Sampling time (s)
		chirp.UseLog := UseLog;             // Use logarithmic or linear chirp
		chirp.Reset := TRUE;                // Force reset of internal states
		chirp.Start := FALSE;               // Don’t begin signal yet
		chirp();                            // Execute one cycle to apply reset

		// Open file for logging using FB_DataLogger
		// This prepares the binary file for real-time write access
		logger(
			netId := netId,
			sFileName := sFileName,
			bOpen := TRUE,
			bWrite := FALSE,
			bClose := FALSE
		);

	// --- STATE: OpeningFile (Poll Logger Status) ---
	E_State.OpeningFile:
		// Keep the logger running with no new triggers while waiting for the file to open
		// Required because TwinCAT file function blocks are edge-triggered
		logger(
			netId := netId,
			sFileName := sFileName,
			bOpen := FALSE,
			bWrite := FALSE,
			bClose := FALSE
		);

	// --- STATE: Chirp (Generate and Feed Setpoints + Logging) ---
	E_State.Chirp:
		// Execute chirp function block
		// It will output a sinusoidal signal whose frequency increases over time
		chirp(
			Start := TRUE,
			Reset := FALSE
		);

		// Read real-time feedback from the axis (actual state)
		act_pos := asse1.NcToPlc.ActPos;
		act_vel := asse1.NcToPlc.ActVelo;
		act_torque := asse1.NcToPlc.ActTorque;

		// Compute new target position relative to the start
		pos := first_position + chirp.SignalOut;

		// Extract target velocity and acceleration from chirp signal
		vel := chirp.SignalDot;
		acc := chirp.SignalDDot;

		// Compute direction: required by MC_ExtSetPointGenFeed
		// Helps motion control logic determine the axis movement orientation
		IF (vel &gt; 0) THEN
			dir := 1;
		ELSIF (vel &lt; 0) THEN
			dir := -1;
		ELSE
			dir := 0;
		END_IF

		// Send external setpoint commands to the axis
		// This bypasses normal PLCopen motion blocks and directly controls position, velocity, acceleration
		MC_ExtSetPointGenFeed(
			Axis := asse1,
			Position := pos,
			Velocity := vel,
			Acceleration := acc,
			Direction := dir
		);

		// Log data to file in real-time
		// Each sample includes:
		//   - Current chirp time (t)
		//   - Actual position
		//   - Actual velocity
		//   - Actual torque
		logger(
			t := chirp.t,
			act_pos := act_pos,
			act_vel := act_vel,
			act_torque := act_torque,
			bOpen := FALSE,
			bWrite := TRUE,
			bClose := FALSE
		);

	// --- STATE: Saving (Close File) ---
	E_State.Saving:
		// Trigger logger to close the binary file once the chirp is finished
		// This ensures all buffered data is saved to disk
		logger(
			bOpen := FALSE,
			bWrite := FALSE,
			bClose := TRUE
		);

	// --- STATE: SlowingDown (Monitor Velocity and Wait) ---
	E_State.SlowingDown:
		// Increment internal delay counter (used as timeout)
		idx := idx + 1;

		// Continue monitoring axis feedback during deceleration
		act_pos := asse1.NcToPlc.ActPos;
		act_vel := asse1.NcToPlc.ActVelo;

	// --- STATE: Stopping (Timeout Before Power-Off) ---
	E_State.Stopping:
		// Let system rest before fully disabling drive power
		// This ensures that all operations are complete and that no active motion remains
		idx := idx + 1;

END_CASE
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
            <InterfaceAsPlainText>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">PROGRAM ChirpTest
VAR
	// Axis reference and motion control blocks
	asse1: AXIS_REF;
	asse1_power: MC_Power;
	asse1_setpos: MC_SetPosition;
	
	bStart AT%I*: BOOL ;                       // Start trigger for the chirp experiment (external input)
	fbExtSetPointEnable : MC_ExtSetPointGenEnable; // Enables external setpoint generation for the axis
	fbExtSetPointDisable : MC_ExtSetPointGenDisable; // Disables external setpoint generation

	Tc: LREAL := 0.001;                        // Sampling time (in seconds), default 1 ms
	amplitude: LREAL := 360;                  // Amplitude of the chirp signal in engineering units (e.g., degrees or mm)
	
	acc: LREAL := 0.0;                         // Output acceleration from the chirp generator
	vel: LREAL := 100.0;                       // Output velocity from the chirp generator
	pos: LREAL := 0.0;                         // Output position from the chirp generator
	dir: DINT := 0;                            // Direction: 1 = forward, -1 = backward, 0 = stopped
	
	f0: LREAL := 1.0;                          // Starting frequency of the chirp signal (Hz)
	f1: LREAL := 450.0;                        // Final frequency of the chirp signal (Hz)
	duration: LREAL := 60.0;                   // Duration of the chirp signal (seconds)
	UseLog AT%I*: BOOL;                        // TRUE for logarithmic chirp; FALSE for linear chirp
	
	running AT%Q*: BOOL;                       // TRUE when experiment is in Chirp state
	stopping AT%Q*: BOOL;                      // TRUE during final deceleration and stop phases

	chirp: FB_ChirpSignal;                    // Chirp signal generator function block instance
	
	act_pos: LREAL;                           // Actual position from the axis
	act_vel: LREAL;                           // Actual velocity from the axis
	act_torque: LREAL;                        // Actual torque from the axis
	first_position: LREAL;                    // Position at the start of the chirp experiment

	logger: FB_DataLogger;                    // File logging function block instance
	state: E_State := E_State.None;           // Current state of the finite state machine

	sFileName: T_MaxString := 'C:\Users\Administrator\Documents\binari\test1.bin'; // Binary file path
	netId: T_AmsNetId;                        // Network ID for TwinCAT file functions
	nTaskIdx: DINT;                           // Index of the running task
	tmp: LREAL;                               // Temporary variable
	idx: INT;                                 // Generic counter for delay loops
	last_position: LREAL;                     // Position after chirp completion
	slowing_down_vel: LREAL;                  // Velocity captured before slowing down
END_VAR</xhtml>
            </InterfaceAsPlainText>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>faf193ce-2e97-4df2-b838-7b2970aa0176</ObjectId>
          </data>
        </addData>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="ChirpTest" ObjectId="faf193ce-2e97-4df2-b838-7b2970aa0176" />
      </ProjectStructure>
    </data>
  </addData>
</project>